# DBT 실행 환경 및 경로 설정 규칙

## DBT 실행 파일 경로 설정

### 로컬 환경에서의 dbt 경로
```bash
# 일반적인 dbt 설치 경로들
~/.local/bin/dbt          # pip install --user로 설치된 경우
/usr/local/bin/dbt        # 시스템 전역 설치
/opt/airflow/.local/bin/dbt  # Airflow 컨테이너 내부
/home/airflow/.local/bin/dbt # Airflow 사용자 홈
```

### Airflow DAG에서 dbt 경로 설정
[postgres_data_copy_dag.py](mdc:airflow/dags/postgres_data_copy_dag.py)에서 dbt 경로를 올바르게 설정해야 함:

```python
# dbt 실행 파일 경로 설정
DBT_PROJECT_PATH = "/opt/airflow/dbt"

# dbt 명령어 실행 시 경로 확인
dbt_cmd = "~/.local/bin/dbt"  # 또는 절대 경로
```

## DBT 프로젝트 환경 변수

### 필수 환경 변수
```bash
DBT_PROFILES_DIR=/opt/airflow/dbt
DBT_PROJECT_DIR=/opt/airflow/dbt
PYTHONPATH=/opt/airflow/dbt:$PYTHONPATH
```

### profiles.yml 환경 변수 참조
[profiles.yml](mdc:airflow/dbt/profiles.yml)에서 환경 변수 사용:

```yaml
host: "{{ env_var('POSTGRES_HOST', '10.150.2.150') }}"
user: "{{ env_var('POSTGRES_USER', 'airflow') }}"
password: "{{ env_var('POSTGRES_PASSWORD', 'airflow') }}"
port: "{{ env_var('POSTGRES_PORT', 15432) }}"
dbname: "{{ env_var('POSTGRES_DB', 'airflow') }}"
```

## DBT 프로젝트 설정 검증

### dbt_project.yml 필수 설정
[dbt_project.yml](mdc:airflow/dbt/dbt_project.yml)에서 다음 설정이 올바르게 되어 있어야 함:

```yaml
name: 'postgres_data_copy'        # 프로젝트 이름
version: '1.0.0'                 # 버전
profile: 'postgres_data_copy'     # profiles.yml의 프로필명과 일치
config-version: 2                 # dbt 1.0+ 필수
require-dbt-version: ">=1.8.0"   # 최소 dbt 버전
```

### 프로젝트 경로 설정
```yaml
model-paths: ["models"]
snapshot-paths: ["snapshots"]
seed-paths: ["seeds"]
test-paths: ["tests"]
analysis-paths: ["analyses"]
macro-paths: ["macros"]
```

## DBT 실행 순서 및 검증

### 1. 의존성 설치
```bash
dbt deps  # packages.yml의 패키지 설치
```

### 2. 프로젝트 파싱
```bash
dbt parse  # 프로젝트 설정 및 SQL 파일 파싱
```

### 3. 연결 테스트
```bash
dbt debug  # 프로필 연결 및 설정 검증
```

### 4. 모델 실행
```bash
dbt run    # 모델 실행
dbt test   # 테스트 실행
dbt snapshot  # 스냅샷 생성
```

## 일반적인 오류 및 해결 방법

### Parsing Error 해결
```
Parsing Error at path ['name']: None is not of type 'string'
```
**해결 방법:**
- `dbt_project.yml`의 `name` 필드가 문자열인지 확인
- `config-version: 2` 설정 확인
- YAML 문법 오류 확인

### Connection Error 해결
```
Failed to connect to database
```
**해결 방법:**
- `profiles.yml`의 연결 정보 확인
- 데이터베이스 서버 상태 확인
- 방화벽 및 네트워크 설정 확인

### Import Timeout 해결
```
DagBag import timeout
```
**해결 방법:**
- Airflow 설정에서 `core.dagbag_import_timeout` 증가
- dbt 프로젝트 크기 최적화
- 불필요한 파일 제거

## DBT 모델 및 스냅샷 설정

### 스테이징 모델 설정
[stg_infomax_stock_master.sql](mdc:airflow/dbt/models/staging/stg_infomax_stock_master.sql):

```sql
{{
    config(
        materialized='view',
        schema='staging'
    )
}}
```

### 스냅샷 설정
[infomax_stock_master_snapshot.sql](mdc:airflow/dbt/snapshots/infomax_stock_master_snapshot.sql):

```sql
{{
    config(
      target_database='airflow',
      target_schema='snapshots',
      unique_key=['인포맥스코드', '팩셋거래소', 'gts_exnm', '티커'],
      strategy='timestamp',
      updated_at='일자',
      invalidate_hard_deletes=True
    )
}}
```

### 소스 정의
[sources.yml](mdc:airflow/dbt/models/sources.yml)에서 원본 데이터 소스 정의:

```yaml
sources:
  - name: raw_data
    description: "Raw data tables copied from source database"
    tables:
      - name: 인포맥스종목마스터
        description: "인포맥스 종목 마스터 테이블"
```

## DBT 테스트 및 검증

### 데이터 테스트 설정
[schema.yml](mdc:airflow/dbt/models/staging/schema.yml)에서 테스트 정의:

```yaml
columns:
  - name: 인포맥스코드
    tests:
      - not_null
      - unique
```

### 테스트 실행
```bash
dbt test                    # 모든 테스트 실행
dbt test --select staging   # 특정 태그의 테스트만 실행
dbt test --models stg_infomax_stock_master  # 특정 모델 테스트
```

## DBT 문서 생성

### 문서 생성 및 서빙
```bash
dbt docs generate  # 문서 생성
dbt docs serve     # 로컬 서버 시작
```

### 문서 설정
`dbt_project.yml`에서 문서 관련 설정:

```yaml
models:
  postgres_data_copy:
    staging:
      +description: "Staging models for data transformation"
      +tags: ["staging"]
```
description:
globs:
alwaysApply: false
---
