# dbt 실행 환경 설정 및 태그 기반 선택적 실행 가이드

## dbt 실행 환경 개요

### 현재 프로젝트 구조
- **프로젝트 경로**: `/opt/airflow/dbt`
- **프로필**: `postgres_data_copy`
- **타겟**: `dev`
- **데이터베이스**: PostgreSQL (10.150.2.150:15432)

### 환경별 설정
```yaml
# profiles.yml
postgres_data_copy:
  target: dev  # 환경별 타겟 설정
  outputs:
    dev:
      type: postgres
      host: "{{ env_var('POSTGRES_HOST', '10.150.2.150') }}"
      port: "{{ env_var('POSTGRES_PORT', 15432) }}"
      schema: raw_data
```

## 태그 기반 선택적 실행

### 태그 시스템 구조
```yaml
# dbt_project.yml
models:
  postgres_data_copy:
    business:
      +tags: ["business", "production", "infomax"]
      +enabled: true

    future:
      +tags: ["future", "development"]
      +enabled: false
```

### 태그별 실행 명령어
```bash
# 인포맥스 관련 모델만 실행
dbt run --select tag:infomax

# 프로덕션 모델만 실행
dbt run --select tag:production

# 개발 모델 제외하고 실행
dbt run --exclude tag:development

# 특정 스키마의 모델만 실행
dbt run --select schema:business
```

### 스냅샷 선택적 실행
```bash
# 인포맥스 관련 스냅샷만 실행
dbt snapshot --select tag:infomax

# 특정 스키마의 스냅샷만 실행
dbt snapshot --select schema:snapshots
```

## Airflow 통합 설정

### DAG에서 태그 기반 실행
```python
pipeline_config = {
    "run_snapshot": True,
    "run_models": True,
    "run_tests": True,
    "snapshot_select": "tag:infomax",
    "run_select": "tag:infomax",
    "test_select": "tag:infomax",
}
```

### 환경별 실행 전략
```python
# 개발 환경
if ENVIRONMENT == "development":
    pipeline_config["run_models"] = False
    pipeline_config["run_tests"] = False

# 프로덕션 환경
elif ENVIRONMENT == "production":
    pipeline_config["run_models"] = True
    pipeline_config["run_tests"] = True
```

## 모델 관리 전략

### 활성화/비활성화
```sql
-- 활성화된 모델
{{
    config(
        materialized='table',
        schema='business',
        tags=['business', 'production', 'infomax'],
        enabled=true
    )
}}

-- 비활성화된 모델 (개발 중)
{{
    config(
        materialized='table',
        schema='development',
        tags=['development', 'experimental'],
        enabled=false
    )
}}
```

### 스키마별 분리
```yaml
# dbt_project.yml
models:
  postgres_data_copy:
    business:
      +schema: business
      +tags: ["business", "production"]

    staging:
      +schema: staging
      +tags: ["staging", "development"]

    marts:
      +schema: marts
      +tags: ["marts", "production"]
```

## 실행 환경별 최적화

### 개발 환경
- **모델 실행**: 선택적 (태그 기반)
- **테스트 실행**: 최소한
- **스냅샷**: 필수
- **성능**: 빠른 반복을 위해 최적화

### 스테이징 환경
- **모델 실행**: 전체
- **테스트 실행**: 전체
- **스냅샷**: 전체
- **성능**: 프로덕션과 유사하게

### 프로덕션 환경
- **모델 실행**: 전체
- **테스트 실행**: 전체
- **스냅샷**: 전체
- **성능**: 안정성 우선

## 문제 해결

### 태그 인식 문제
```bash
# 프로젝트 재파싱
dbt parse

# 태그별 모델 목록 확인
dbt ls --select tag:infomax

# 전체 모델 목록 확인
dbt ls
```

### 실행 권한 문제
```bash
# 프로필 연결 테스트
dbt debug

# 데이터베이스 연결 테스트
dbt run --select tag:infomax --dry-run
```

### 성능 최적화
```bash
# 병렬 실행 설정
dbt run --select tag:infomax --threads 4

# 캐시 사용
dbt run --select tag:infomax --cache-selected-only
```

## 모범 사례

### 1. 환경별 태그 분리
```sql
# 개발 환경
+tags: ["development", "experimental"]

# 프로덕션 환경
+tags: ["production", "stable"]
```

### 2. 도메인별 태그 구조
```sql
# 인포맥스 도메인
+tags: ["infomax", "stock", "master"]

# 시장 데이터 도메인
+tags: ["market", "price", "volume"]
```

### 3. 단계별 태그 구조
```sql
# 스테이징 단계
+tags: ["staging", "raw"]

# 비즈니스 로직 단계
+tags: ["business", "transformed"]

# 마트 단계
+tags: ["marts", "final"]
```
