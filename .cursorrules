# DBT-Airflow Template Cursor Rules

## 프로젝트 개요
이 프로젝트는 PostgreSQL 데이터베이스 간 데이터 복사 및 변환을 위한 Airflow DAG와 DBT 통합 템플릿입니다.

## 코드 스타일 및 컨벤션

### Python 코드
- **Python 버전**: Python 3.12+ 사용
- **코드 포맷팅**: Black, Ruff 사용
- **타입 힌트**: 모든 함수와 메서드에 타입 힌트 필수
- **문서화**: 모든 클래스와 메서드에 docstring 필수
- **네이밍**: 
  - 클래스: PascalCase (예: `DataCopyEngine`)
  - 함수/메서드: snake_case (예: `copy_data_with_custom_sql`)
  - 변수: snake_case (예: `table_config`)
  - 상수: UPPER_SNAKE_CASE (예: `SOURCE_CONN_ID`)

### SQL 코드
- **키워드**: 대문자 사용 (예: `SELECT`, `FROM`, `WHERE`)
- **테이블/컬럼명**: 소문자, snake_case 사용
- **들여쓰기**: 일관된 들여쓰기로 가독성 향상

## 아키텍처 원칙

### 모듈화
- 공통 기능은 `common/` 디렉토리에 모듈로 분리
- 각 DAG는 단일 책임 원칙 준수
- 설정과 로직 분리

### 에러 핸들링
- 모든 외부 API 호출에 예외 처리 필수
- 상세한 에러 로깅 및 사용자 친화적 메시지
- 재시도 메커니즘 구현 (적절한 경우)

### 성능 최적화
- 대용량 데이터 처리를 위한 배치 처리
- 데이터베이스 연결 풀링
- 메모리 사용량 최적화

## 데이터 처리 규칙

### 데이터 타입 변환
- 소스 데이터의 데이터 타입을 타겟 스키마에 맞게 자동 변환
- BIGINT/INTEGER 컬럼의 소수점 값은 정수로 변환
- 빈 문자열과 NaN 값은 NULL로 변환

### 데이터 무결성
- 모든 데이터 복사 후 무결성 검증 수행
- 기본키 기반 데이터 일치 여부 확인
- 증분 동기화 시 변경된 데이터만 처리

### 스키마 관리
- 소스 테이블 스키마 자동 감지
- 타겟 테이블 자동 생성 (필요시)
- 컬럼 타입 및 제약조건 자동 매핑

## Airflow DAG 설계

### 태스크 구조
- 각 태스크는 명확한 목적과 책임을 가져야 함
- 태스크 간 의존성은 명시적으로 정의
- 실패한 태스크의 재실행 가능성 고려

### 설정 관리
- 테이블별 설정은 구조화된 딕셔너리로 관리
- 환경별 설정 분리 (개발/스테이징/프로덕션)
- 민감한 정보는 Airflow Variables나 환경변수 사용

### 모니터링
- 각 단계별 체크포인트 및 진행 상황 추적
- 상세한 로깅 및 메트릭 수집
- 실패 시 즉시 알림 및 복구 방안 제시

## DBT 통합

### 스냅샷 관리
- 데이터 변경사항 자동 추적
- 스냅샷 실행 결과 검증
- 실패 시 적절한 에러 핸들링

### 모델 실행
- 모델 간 의존성 관리
- 실행 순서 최적화
- 테스트 결과 검증

### 문서화
- 모든 DBT 모델에 설명 추가
- 소스 테이블 정의 및 메타데이터 관리
- 데이터 계보 추적

## 보안 및 권한

### 데이터베이스 연결
- 최소 권한 원칙 적용
- 연결 정보 암호화 및 안전한 저장
- 정기적인 권한 검토

### 데이터 접근
- 민감한 데이터 마스킹 또는 암호화
- 접근 로그 기록 및 모니터링
- 데이터 유출 방지 조치

## 테스트 및 품질

### 단위 테스트
- 핵심 로직에 대한 단위 테스트 작성
- 모킹을 사용한 외부 의존성 격리
- 테스트 커버리지 80% 이상 유지

### 통합 테스트
- 전체 워크플로우 테스트
- 다양한 데이터 시나리오 테스트
- 성능 및 부하 테스트

### 코드 품질
- 정적 분석 도구 사용 (mypy, ruff)
- pre-commit 훅으로 코드 품질 자동 검사
- 정기적인 코드 리뷰 및 리팩토링

## 문서화

### 코드 문서화
- 모든 공개 API에 상세한 docstring
- 복잡한 로직에 인라인 주석
- 예제 코드 및 사용법 포함

### 프로젝트 문서화
- README 파일에 프로젝트 개요 및 사용법
- API 문서 및 아키텍처 다이어그램
- 문제 해결 가이드 및 FAQ

### 운영 문서화
- 배포 및 설정 가이드
- 모니터링 및 알림 설정
- 장애 대응 및 복구 절차

## 성능 및 확장성

### 확장성 고려
- 수평적 확장 가능한 구조 설계
- 설정 기반 동작으로 유연성 확보
- 플러그인 아키텍처로 기능 확장

### 성능 최적화
- 데이터베이스 쿼리 최적화
- 메모리 및 CPU 사용량 모니터링
- 병렬 처리 및 비동기 작업 활용

### 리소스 관리
- 적절한 타임아웃 및 재시도 설정
- 메모리 누수 방지 및 가비지 컬렉션
- 리소스 사용량 제한 및 모니터링

## 운영 및 유지보수

### 로깅 및 모니터링
- 구조화된 로깅 (JSON 형식)
- 로그 레벨 적절한 설정
- 중앙 집중식 로그 수집 및 분석

### 배포 및 릴리스
- 버전 관리 및 태깅
- 롤백 전략 및 백업
- 무중단 배포 고려

### 장애 대응
- 장애 감지 및 자동 알림
- 자동 복구 메커니즘
- 장애 분석 및 개선 방안

## 준수사항

### 라이선스
- MIT 라이선스 준수
- 오픈소스 라이브러리 사용 시 라이선스 확인
- 상용 라이브러리 사용 시 라이선스 검토

### 개인정보 보호
- 개인정보 수집 및 처리 시 관련 법규 준수
- 데이터 암호화 및 접근 제어
- 데이터 보존 및 삭제 정책 수립

### 보안
- 정기적인 보안 취약점 점검
- 의존성 패키지 보안 업데이트
- 보안 사고 대응 절차 수립

---

이 규칙들은 프로젝트의 일관성과 품질을 유지하기 위한 가이드라인입니다. 
프로젝트의 특성과 요구사항에 따라 적절히 적용하고 지속적으로 개선해 나가세요. 